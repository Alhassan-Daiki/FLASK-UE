from sqlalchemy import CheckConstraint
from app import db
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
"""

from sqlalchemy import CheckConstraint : importe la classe CheckConstraint du module sqlalchemy. CheckConstraint est utilisé pour définir une contrainte de vérification sur une colonne dans une table de base de données.

from app import db : importe l'objet db à partir du module app. Cet objet est une instance de la classe SQLAlchemy et représente la base de données de l'application Flask.

from werkzeug.security import generate_password_hash, check_password_hash : importe les fonctions generate_password_hash et check_password_hash du module werkzeug.security. Ces fonctions sont utilisées pour le hachage sécurisé des mots de passe.

from flask_login import UserMixin : importe la classe UserMixin du module flask_login. UserMixin fournit des implémentations par défaut des méthodes requises pour gérer l'authentification des utilisateurs avec Flask-Login.

L'ensemble de ces imports fournit des dépendances nécessaires pour la création et la gestion de la base de données, le hachage des mots de passe et l'authentification des utilisateurs dans l'application Flask.

"""

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(50), nullable=False)
    prenom = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    roles = db.relationship('Role', secondary='user_roles', backref='users', lazy=True)
    products = db.relationship('Product', backref='user', lazy=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<User {self.email}>'

class Role(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(50), nullable=False)

    __table_args__ = (
        CheckConstraint(nom.in_(['admin', 'gerant']), name='check_role_nom'),
    )

user_roles = db.Table('user_roles',
    db.Column('user_id', db.Integer, db.ForeignKey('user.id'), primary_key=True),
    db.Column('role_id', db.Integer, db.ForeignKey('role.id'), primary_key=True)
)


class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    price = db.Column(db.Float, nullable=False)
    seller_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    seller = db.relationship('User', backref=db.backref('products_sold', lazy=True))



db.create_all()
